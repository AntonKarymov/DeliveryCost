Краткие ответы на вопросы

Как бы вы тестировали/проверяли корректность, полноту и неизбыточность ваших тестов?

Корректность тестов целиком и полностью лежит на плечах тестировщика,
который составляется тест кейсы на основе требований и теории тестирования

Основной подход к тест-дизайну это разбиение на классы эквивалентности и проверка на граничных значениях

Обычно по требованиям составляются тест кейсы, которые заносятся в какую-либо систему типо  TestRail  или TestIt

Для проверки полноты и неизбыточности есть два подхода

1. Измерить каким-либо образом покрытие требований

    То есть посмотреть какое процентное соотношение от общего количества тест-кейсов из TestRail или TestIt заватоматизировано

2 Измерить покрытие кода

    Померить покрытие по классам, по методам, по блокам или по строчкам кода

    Стандартным инструментом для этого в Java является https://www.eclemma.org/jacoco/

    После запуска тестов библиотека сделает репорт в котором будет показано какое количество строчек кода (классов, методов, блоков) проекта вызывалась в ходе выполнения тестов


Как бы вы осуществляли эти проверки в автоматическом режиме?

Автотесты должны быть встроены в текущие процессы CI компании, как это сделать будет зависеть от того как построены процессы  CI
Опишу как это выглядит в классическом случае , например. Если используется Jenkins :

1.)Пишется  джоба на jenkins, которая умеет

      Брать исходный код проекта из определенной ветки

      Опционально мержить или не межрить в мастер

      Собирать из получившейся ветки билд
      Деплойить на какой-либо хост

2.)Пишется джоба для  репозитория автотестов которая умеет

     Брать исходный код проекта автотестов с определенной ветки

     Собирать билд тестов

     Запускать их на хосте полученного из пункта 1,

     Строить аллюр отчет и прикреплять его к Джобе в артифактах

     Оповещать всех заинтересованных лиц о результатах прогона тестов(Например в slack\email\glip)

3.)Запуск Джоб 1 и 2 может осуществляться как в ручном режиме, так и в автоматическом режиме по каким-либо триггерам (например по каждому пулреквесту из ветки разработки в мастер)


В случае java за сборку  и запуск тестов обычно отвечает Maven или Grudle

Хорошая практика осуществлять запуск автотестов в докер контейнерах для этого потребуется собрать докер образ тестов и и запушить его в какое-либо хранилище например Нексус

В таком случае запуск будет представлять из себя забирание образа из нексуса и запуск контейнера на его основе

В случае UI тестов с селениумом стандартным инструментом для этого является Selenoid https://aerokube.com/selenoid/latest/

Обычно тесты параллелятся